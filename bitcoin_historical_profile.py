# -*- coding: utf-8 -*-
"""BitCoin - Historical Profile.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19BxDmeUtashasyHwrPNct-btUYgKhAQs

#BitCoin - Historical Profile




***
## Legal Disclaimer

The Content on this project is for informational/study purposes only, you should not construe any such information or other material as legal, tax, investment, financial, or other advice. Nothing contained on our project constitutes a solicitation, recommendation, endorsement, or offer by HII or any third party service provider to buy or sell any securities or other financial instruments in this or in in any other jurisdiction in which such solicitation or offer would be unlawful under the securities laws of such jurisdiction.



 
## Aproach
The **moving average (MA)** is a simple technical analysis tool that smooths out price data by creating a constantly updated average price. The average is taken over a specific period of time, like 10 days, 20 minutes, 30 weeks or any time period the trader chooses.

* The dataset was take from  https://www.investing.com/crypto/bitcoin/historical-data acessed 15/05/2020.

***
***


**Objective**

* On this project we'll work with the historical BitCoin dataset Jul 10, 2010 - Apr 15, 2020 and apply a simple Cross Moving Average Algorithmic Trading Strategy, applying the moving average (MA) 30 and 100 days.

* We'll create the function to based on the close Price to calculate the SMA30 (30 days) and SMA100 (100 days) and give the signal to Buy and Sell based on the MA strategy.
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries

import numpy as np
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
# %matplotlib inline
plt.style.use("fivethirtyeight")

from google.colab import files
uploaded = files.upload()

# Sorting in increasing chronology by the Index
df = pd.read_csv("Bitcoin Historical Data - Investingcom.csv")
df1 = df.sort_index(ascending=False)
df2 = df1.reset_index()
df2

df2['Price'].apply(type)

# Function that will remove the comma from the price values 
# https://pbpython.com/currency-cleanup.html
def clean_currency(x):
    """ If the value is a string, then remove currency symbol and delimiters
    otherwise, the value is numeric and can be converted
    """
    if isinstance(x, str):
        return(x.replace(',', ''))
    return(x)

df2['Price'] = df2['Price'].apply(clean_currency).astype(float)
df2

df2.describe()

#Vizualise de data
plt.figure(figsize=(12.5,5))
plt.plot(df2['Price'], label='BTC', linewidth=1.5, )
plt.title("BitCoin Price History")
plt.xlabel('Jul 10, 2010 - Apr 15, 2020')
plt.ylabel('Colse price USD ($)')


plt.legend(loc='upper left')
plt.show()

"""## Creating the Moving Avareges (MA)"""

#Creating the Moving avarege with 30 days window
SMA30 = pd.DataFrame()
SMA30['Price'] = df2['Price'].rolling(window=30).mean()
SMA30

#Creating the Moving avarege with 100 days window
SMA100 = pd.DataFrame()
SMA100['Price'] = df2['Price'].rolling(window=100).mean()
SMA100

#Vizualise de data
plt.figure(figsize=(20,10))
plt.plot(df2['Price'], label='BTC', linewidth=1.5)
plt.plot(SMA30['Price'], label="SMA30", linewidth=1.5)
plt.plot(SMA100['Price'], label='SMA100', linewidth=1.5)
plt.title("BitCoin Price History")
plt.xlabel('Jul 10, 2010 - Apr 15, 2020')
plt.ylabel('Colse price USD ($)')
plt.legend(loc='upper left')
plt.show()

#Creating a nwe dataframe to store all the data
stock_name = 'BTC'
data = pd.DataFrame()
data[stock_name] = df2['Price']
data['SMA30'] = SMA30['Price']
data['SMA100'] = SMA100['Price']
data

"""## Creating the funcion for **MA** strategy"""

# Strategy function
# send a singnal (buy, sell) when the SMA line croosing each other

def buy_sell(data):
  buy_sig = []
  sell_sig = []
  flag = -1

  for i in range(len(data)):
    if data['SMA30'][i] > data['SMA100'][i]:
      if flag != 1:
        buy_sig.append(data[stock_name][i])
        sell_sig.append(np.nan)
        flag = 1
      else:
        buy_sig.append(np.nan)
        sell_sig.append(np.nan)
    elif data['SMA30'][i] < data['SMA100'][i]:
        if flag != 0:
          buy_sig.append(np.nan)
          sell_sig.append(data[stock_name][i])
          flag = 0
        else:
          buy_sig.append(np.nan) 
          sell_sig.append(np.nan)
    else:
      buy_sig.append(np.nan)
      sell_sig.append(np.nan)
  
  return (buy_sig, sell_sig)

#stored the BUY and SELL data
buy_sell = buy_sell(data)
data['Buy_signal'] = buy_sell[0]  
data['Sell_signal'] = buy_sell[1]

data

#Vizualise de data appling the Buy and Sell strategy
#Vizualise de data
plt.figure(figsize=(20,10))

plt.plot(data['BTC'], label='BTC', alpha=0.35, linewidth=1.5)
plt.plot(data['SMA30'], label="SMA30", alpha=0.9, linewidth=1.5)
plt.plot(data['SMA100'], label='SMA100', alpha=0.9, linewidth=1.5)

plt.scatter(data.index, data['Buy_signal'], label='Buy', marker='^', color='green')
plt.scatter(data.index, data['Sell_signal'], label='Sell', marker='*', color='red')

plt.title("BitCoin Price History - Buy/Sell Signals", size=20)
plt.xlabel('Jul 10, 2010 - Apr 15, 2020', size=15)
plt.ylabel('Colse price USD ($)', size=15)
plt.legend(loc='upper left')
plt.show()

"""##**Conclusion**
***
* We create a cross MA function, that is able to signalize the BUY and SELL moments, based on the function strategy.
 * Buy moment is represented by a GREEN signal in the chart when the SM30 cross SM100 to the top.
 * Sell moment is represented by a RED signal in the chart when the SM30 cross SM100 to the downwards.

* This code can be applied for other stock without the necessity to change the function;
* In this proposal, SMA30 (30 days) and SMA100 (100 days) were used, which can be customized through small changes in the code;
"""

